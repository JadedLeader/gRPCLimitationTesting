@using Grpc.Core
@using gRPCToolFrontEnd.Components.Layout
@using gRPCToolFrontEnd.Services
@using gRPCToolFrontEnd.Helpers
@using Serilog
@using Grpc.Net.Client
@using gRPCToolFrontEnd.LocalStorage
@using System.Reactive.Subjects
@using gRPCToolFrontEnd.DictionaryModel
@using System.Collections.Concurrent
@using System.Collections.ObjectModel
@using gRPCToolFrontEnd.Interfaces
@page "/Configuration"
@layout MainLayout
@inject ClientInstanceService ClientInstanceService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject UnaryRequestService UnaryRequestService
@inject ClientHelper ClientHelper
@inject AccountDetailsStore AccountDetailsStore
@inject UtilitiesService UtilitiesService
@inject StreamingLatencyService StreamingLatencyService
@inject IRequestTypeHandlingFactory RequestTypeHandlingFactory

<MudGrid Class="d-flex" Style="padding: 20px; height: 100vh; overflow: hidden;">
    <!-- Left Tree View Section -->
    <MudItem xs="12" sm="4" Style="height: 100%;">
        <MudPaper Elevation="10" Class="MyTreeViewContainer">
            <MudTreeView T="string" SelectionMode="SelectionMode.SingleSelection" >
                <MudTreeViewItem Value='"Client instances with messages"' >
                    @foreach (var clientInstance in _ClientsWithMessages)
                    {
                        <MudTreeViewItem Text="@clientInstance.Key.ToString()" >
                            @foreach (var messageDelay in clientInstance.Value)
                            {
                                <MudTreeViewItem Text="@($"{messageDelay.MessageId} : RequestType {messageDelay.RequestType} : Delay : {messageDelay.MessageDelay}")" />
                            }
                        </MudTreeViewItem>
                    }
                </MudTreeViewItem>
            </MudTreeView>
        </MudPaper>
    </MudItem>

    <!-- Right Content Section -->
    <MudItem xs="12" sm="8" Style="height: 100%; overflow-y: auto;">
        <!-- Dropdown and Toggle Buttons Section -->
        <MudGrid Class="d-flex justify-end align-center" Style="margin-bottom: 20px;">
            <MudItem>
                <MudSelect T="string" Label="Request flow" MultiSelection="false" ValueChanged="@OnRequestFlowChanged" Style="margin-right: 20px; min-width: 200px;">
                    @foreach (string options in _RequestFlowOptions)
                    {
                        <MudSelectItem T="string" Value="@options">@options</MudSelectItem>
                    }
                </MudSelect>

                <MudToggleIconButton @bind-Toggled="@_StreamingOn"
                                     Icon="Icons.Material.Filled.AlarmOff"
                                     ToggledIcon="@Icons.Material.Filled.AlarmOn"
                                     ToggledColor="@Color.Success"
                                     title="@(_StreamingOn ? "Streaming On" : "Streaming Off")"
                                     Style="margin-right: 20px;" />

                <span>Streaming is @(_StreamingOn ? "On" : "Off")</span>

                <MudToggleIconButton @bind-Toggled="@_UnaryOrBatch"
                                     Icon="Icons.Material.Filled.AlarmOff"
                                     ToggledIcon="@Icons.Material.Filled.AlarmOn"
                                     ToggledColor="@Color.Success"
                                     title="@(_UnaryOrBatch ? "Unary" : "Batch")"
                                     Style="margin-right: 20px;" />

                <span>Communication type is @(_UnaryOrBatch ? "Unary" : "Batch")</span>
            </MudItem>
        </MudGrid>

        <!-- Form Section -->
        <MudPaper Elevation="10" Class="pa-4 mt-4" Style="background: rgba(20, 20, 20, 0.9);">
            <MudForm @ref="form">
                <MudCard Style="background: #252525; padding: 20px;">
                    <!-- Input Fields -->
                    <MudTextField Label="Client Instance Unique"
                                  @bind-Value="_ClientUnique"
                                  Required="true"
                                  Class="MyMudTextField"
                                  Style="margin-bottom: 20px;"
                                  Disabled="_IsClientInstanceDisabled"
                                  HelperText="This box displays the client unique that has been created for the current instances of messages"
                                  HelperTextOnFocus="true"
                                  ReadOnly="true"/>

                    <MudTextField Label="File Size"
                                  @bind-Value="_FileSize"
                                  Required="true"
                                  Class="MyMudTextField"
                                  Style="margin-bottom: 20px;"
                                  HelperText="This box lets you decide on the payload size of the request, choose between small, medium and large "
                                  HelperTextOnFocus="true"/>

                    <MudTextField Label="Batch Iterations"
                                  @bind-Value="_Iterations"
                                  T="int"
                                  Required="true"
                                  Class="MyMudTextField"
                                  Style="margin-bottom: 20px;"
                                  Disabled="_IsBatchIterationsDisabled"
                                  HelperText="This text box is indicative of the amount of requests within the batch of a batch requets"
                                  HelperTextOnFocus="true"/>

                    <MudTextField Label="Amount Of Request"
                                  @bind-Value="_RequestCount"
                                  T="int"
                                  Required="true"
                                  Class="MyMudTextField"
                                  Style="margin-bottom: 20px;"
                                  HelperText="This text box is indicative of the amount of the requests being sent"
                                  HelperTextOnFocus="true"/>

                    <MudTextField Label="Channel ID"
                                  @bind-Value="_ChannelId"
                                  Required="true"
                                  Class="MyMudTextField"
                                  Style="margin-bottom: 20px;"
                                  HelperText="This text box is indicative of the channel ID being used to send the gRPC request on"
                                  HelperTextOnFocus="true"/>
                </MudCard>

                <!-- Buttons Section -->
                <MudPaper Class="mt-4 pa-2 d-flex justify-space-between flex-wrap" Style="background: rgba(20, 20, 20, 0.9);">

                    <MudTooltip Text="This clears all the existing client instances within the database"> 
                        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@ClearClientInstances" Style="flex: 1; margin: 5px; color: white;">Clear Clients</MudButton>
                    </MudTooltip>
                    
                    <MudTooltip Text="This will send a single batch streaming request">
                        <MudButton Variant="Variant.Filled" Color="Color.Error" Style="flex: 1; margin: 5px; color: white;" OnClick="@Factory" Disabled="_IsSendBatchStreamDisabled">Send Batch Stream</MudButton>
                    </MudTooltip>

                </MudPaper>
            </MudForm>
        </MudPaper>
    </MudItem>
</MudGrid>


<style>

    .MyTreeViewContainer {
        background: rgba(0, 0, 0, 0.6);
        border-radius: 12px;
        padding: 20px;
        border: 1px solid rgba(255, 255, 255, 0.1);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.8);
        height: 100%; 
        max-height: 80vh; 
        overflow-y: auto; 
        scrollbar-width: thin;
        scrollbar-color: rgba(255, 255, 255, 0.2) transparent;
    }

    .MyTreeViewContainer::-webkit-scrollbar {
        width: 8px;
    }

    .MyTreeViewContainer::-webkit-scrollbar-thumb {
        background: rgba(255, 255, 255, 0.2);
        border-radius: 4px;
    }

    .MyTreeViewContainer::-webkit-scrollbar-track {
        background: rgba(0, 0, 0, 0.4);
    }
  
    .MyMudTextField {
        width: 100%;
    }

    .MyLoginMudButton {
        flex: 1;
        margin: 5px;
    }

    .d-flex {
        display: flex;
    }

    .justify-end {
        justify-content: flex-end;
    }

    .justify-space-between {
        justify-content: space-between;
    }

    .align-center {
        align-items: center;
    }

    button {
        color: white !important;
    }
</style>

@code {


    MudForm form;

    private int AmountOfClients;

    private int _RequestCount;

    private int _Iterations;

    private string _ClientUnique;

    private string _FileSize;

    private string _ChannelId;

    private string _RequestFlow;

    private bool _IsBatchRequestDisabled { get; set; } = false;

    private bool _IsUnaryRequestDisabled;

    private bool _IsApplyConfigDisabled;

    private bool _IsClientInstanceDisabled; 

    private bool _IsBatchIterationsDisabled; 

    private bool _IsClientNumberDisabled;

    private bool _IsSendDifferentRequestsDisabled;

    private bool _IsSendStreamDisabled;

    private bool _IsSendBatchStreamDisabled;

    private bool _OtherRequests { get; set;} = true;

    public bool _StreamingOn { get; set; } = true;

    public bool _UnaryOrBatch { get; set; } = true;

    private bool _UiUpdating = true;

    private Dictionary<Guid, List<Delay>> _ClientsWithMessages = new();

    protected override async Task OnInitializedAsync()
    {
        

        string sessionUnique = await ClientHelper.GetStringFromStringFromLocalStorage("session-unique");

        if(sessionUnique == null)
        {
            Log.Warning($"Session unique could not be retrieved from the local storage when the page loaded");
        }


        await base.OnInitializedAsync();
    }

    private async void HandleUpdateReceived(GetClientsWithMessagesResponse update)
    {
        try
        {
            Log.Information("HandleUpdateReceived invoked.");

            var clientId = Guid.Parse(update.ClientUnique);

            if (!_ClientsWithMessages.ContainsKey(clientId))
            {
                _ClientsWithMessages[clientId] = new List<Delay> { MapToDelay(update) };
            }
            else
            {
                var existingList = _ClientsWithMessages[clientId];
                if (!existingList.Any(d => d.MessageId == update.MessageId))
                {
                    existingList.Add(MapToDelay(update));
                }
                else
                {
                    Log.Warning($"Duplicate Message ID detected: {update.MessageId}. Skipping...");
                }
            }

            Log.Information($"Client with messages count: {_ClientsWithMessages.Count}");

            await InvokeAsync(StateHasChanged);
            Log.Information("StateHasChanged invoked.");
        }
        catch (Exception ex)
        {
            Log.Error(ex, "Error in HandleUpdateReceived.");
        }
        Log.Information("StateHasChanged invoked."); 
    }

    private Delay MapToDelay(GetClientsWithMessagesResponse response)
    {
        return new Delay
        {
             MessageId = response.MessageId,
             RequestType = response.RequestType,
             CommunicationType = response.CommunicationType,
             DataIterations = response.DataIterations,
             DataContent = response.Datacontent,
             MessageDelay = TimeSpan.Parse(response.Delay),
        };
    }

    public void Dispose()
    {
        UtilitiesService.StopReceivingMessages();
    }

    public async Task Factory()
    {

        Guid? channelGuid = null; 

        if(!string.IsNullOrEmpty(_ChannelId))
        {
            if(Guid.TryParse(_ChannelId, out var guid))
            {
                channelGuid = guid;
            }
            else
            {
                Log.Warning($"Channel guid is null");
            }
        }

        var receiver = RequestTypeHandlingFactory.RequestReceiver(
        _StreamingOn,
        _RequestFlow,
        _UnaryOrBatch,
        channelGuid,
        _ClientUnique,
        _FileSize,
        _Iterations,
        _RequestCount
        );

        await receiver.ReceivingRequest();
    }

    /// <summary>
    /// This list holds all of the options for the mudblazor mudselect 
    /// one : one -> one channel, one client instance, one request (single unary / batch unary)
    /// one : many -> one channel, many client instance, many requests (be this single unary or batch unary)
    /// many : one -> many channels, many client instances, one request on each channel 
    /// many : many -> many channels, many client instances, many requests on each channel (can be a mix of batch / single / sequential)
    /// </summary>
    private List<string> _RequestFlowOptions = new List<string>()
    {
        "one : one",
        "one : many",
        "many : one",
        "many : many"
    };


    private List<Guid> ClientList = new List<Guid>();

    private List<Guid> ClientListFromDb = new List<Guid>();

    /// <summary>
    /// This method handles the request flow of the page based on the UI state
    /// Effectively just enables/disables text fields and buttons
    /// </summary>
    /// <param name="value"></param>
    /// <returns></returns>
    private async Task OnRequestFlowChanged(string value)
    {
        Log.Information($"Selected Request Flow: {value}");
        _RequestFlow = value;
        await HandlingCommunications();
    }

    /// <summary>
    /// Handles the communication flow of the forms on the front end depending on what drop down option is currently selected 
    /// Essentially just flips between true and false to disable buttons and input fields
    /// Then calls StateHasChanged to force a page refresh
    /// </summary>
    /// <returns></returns>
    public async Task HandlingCommunications()
    {
        Log.Information($"HandlingCommunications called with _RequestFlow: {_RequestFlow}");

        switch (_RequestFlow)
        {
            case "one : one":
                _IsBatchRequestDisabled = false;
                _IsUnaryRequestDisabled = false;
                _IsApplyConfigDisabled = true;
                _IsClientInstanceDisabled = true;
                _IsClientNumberDisabled = true;
                _IsBatchIterationsDisabled = false;
                _OtherRequests = true;
                _IsSendDifferentRequestsDisabled = true;

                break;

            case "one : many":
                _IsUnaryRequestDisabled = false;
                _IsBatchRequestDisabled = false;
                _IsApplyConfigDisabled = true;
                _IsClientNumberDisabled = true; 
                _IsClientInstanceDisabled = true;
                _IsBatchIterationsDisabled = false;
                _IsUnaryRequestDisabled = true;
                _IsBatchRequestDisabled = true;
                _IsSendStreamDisabled = true;
                _IsSendDifferentRequestsDisabled = false;
                break;

            case "many : one":
                _IsBatchRequestDisabled = false;
                _IsUnaryRequestDisabled = false;
                _IsClientInstanceDisabled = true;
                _IsBatchIterationsDisabled = false;
                _IsClientNumberDisabled = true;
                _IsBatchRequestDisabled = true;
                _IsUnaryRequestDisabled = true;
                _IsBatchRequestDisabled = true;
                break;

            case "many : many":
                _IsBatchRequestDisabled = false;
                _IsUnaryRequestDisabled = false;
                _IsClientInstanceDisabled = true;
                _IsBatchIterationsDisabled = false;
                _IsUnaryRequestDisabled = true;
                _IsBatchRequestDisabled = true;
                break;

            default:
                _IsBatchRequestDisabled = false;
                _IsUnaryRequestDisabled = false;
                break;
        }

        StateHasChanged();
    } 

    /// <summary>
    /// Clears all the client instances within the database based on the session unique
    /// This is currently a unary -> unary implementation
    /// </summary>
    /// <returns></returns>
    private async Task ClearClientInstances()
    {
        string sessionUnique = await ClientHelper.GetStringFromStringFromLocalStorage("session-unique");

        if(sessionUnique == null)
        {
            Log.Warning($"Session unique was null from the local storage when trying to clear all client instances");
        }

        ClientListFromDb.Clear();

        GetClientInstancesFromSessionUniqueRequest request = new GetClientInstancesFromSessionUniqueRequest
        {
                SessionUnique = sessionUnique
        };

        //THIS DELETES THE CURRENT RECORDS IN A UNARY MATTER - i want to try and get this to work in a streaming fashion
        await ClientInstanceService.GetClientInstancesAsync(request); 

       
    }

}
