@using gRPCToolFrontEnd.Components.Layout
@using gRPCToolFrontEnd.Services
@using Serilog
@page "/Configuration"
@layout MainLayout
@inject ClientInstanceService ClientInstanceService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage


<HeadContent>
    <link href="/Style/LoginPage.css" rel="stylesheet" />
    <link href="/Style/ConfigurationPage.css" rel="stylesheet" />
</HeadContent>

<body class="MyCustomBody"></body>

<MudGrid Justify="Justify.Center" Spacing="4">
    <MudItem xs="12" sm="7">
        <MudForm @ref="form" Class="MyMudForm">
            
            <!-- Corrected binding -->
            <MudTextField font-style="Montserrat" @bind-value="@AmountOfClients"  Class="MyMudTextField" T="int" Label="Client number" Required="true" RequiredError="A client number is required!" HelperText="Input amount of client above:" Margin="Margin.Dense"></MudTextField>

            <MudPaper Class="pa-4 mt-4">
                <MudButton Class="MyLoginMudButton" Variant="Variant.Filled" DropShadow="false" @onclick="@GenerateClients">Apply Configuration Settings</MudButton>
                <MudButton Class="MyLoginMudButton" Variant="Variant.Filled" DropShadow="false" @onclick="@ClearClientInstances">Clear Client Instances</MudButton>
            </MudPaper>

        </MudForm>
    </MudItem>
</MudGrid>


@code {

    //essentially what we're going to want on this page is for the user to be able to generate as many clients as he wants
    //stores them in a DS locally which we can then call to populate the database with the clients that are created

    MudForm form;

    private int AmountOfClients; 

    private List<Guid> ClientList = new List<Guid>();

    private List<Guid> ClientListFromDb = new List<Guid>();

    private async Task GenerateClients()
    {
        await GeneratingClientInstances();

        await SendClientsToBackend();
    }

    private async Task ClearClientInstances()
    {
        string sessionUnique = await GetStringFromStringFromLocalStorage("session-unique");

        ClientListFromDb.Clear();

        GetClientInstancesFromSessionUniqueRequest request = new GetClientInstancesFromSessionUniqueRequest
            {
                SessionUnique = sessionUnique
            };

        //await ClientInstanceService.GetClientInstancesViaSessionUnique(request, ClientListFromDb);

        //THIS DELETES THE CURRENT RECORDS IN A UNARY MATTER
        await ClientInstanceService.GetClientInstancesAsync(request);

        //await ClientInstanceService.ClearingClientInstancesStreamedAsync(sessionUnique, ClientListFromDb);
    }

    private async Task GeneratingClientInstances()
    {
        int i = 0;

        while (i < AmountOfClients)
        {
            ClientList.Add(Guid.NewGuid());

            Log.Information($"amount of things in client list {i}");

            i++;
        }
    }

    private async Task SendClientsToBackend()
    {
        string username = await GetStringFromStringFromLocalStorage("username");

        string sessionUnique = await GetStringFromStringFromLocalStorage("session-unique");

        string accountUnique = await GetStringFromStringFromLocalStorage("account-unique");

        await ClientInstanceService.CreatingClientInstancesStreamedAsync(sessionUnique, accountUnique, ClientList);
    }

    private async Task<string> GetStringFromStringFromLocalStorage(string storagekey)
    {
        string? localStorageUsername = await LocalStorage.GetItemAsync<string>(storagekey);

        if(string.IsNullOrEmpty(localStorageUsername))
        {
            Log.Information($"key {storagekey} cannot be found in the local storage");
        }

        return localStorageUsername;
    }
}
