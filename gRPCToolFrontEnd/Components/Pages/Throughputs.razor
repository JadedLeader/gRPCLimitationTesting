@page "/Throughput"
@using System.Diagnostics
@using Serilog
@using gRPCToolFrontEnd.Components.Layout
@using gRPCToolFrontEnd.Services
@using gRPCToolFrontEnd.LocalStorage
@layout MainLayout
@inject UnaryRequestService UnaryRequestService
@inject StreamingLatencyService StreamingLatencyService
@inject SentRequestStorage SentRequestStorage
@inject ThroughputService ThroughputService

<MudContainer MaxWidth="MaxWidth.False" Class="MyMudPaper">
    <MudGrid>
        <!-- 1) Top Section: Buttons & Iterations -->
        <MudItem xs="12">
            <MudGrid>
                <MudItem xs="6" md="2">
                    <MudButton Variant="Variant.Filled" FullWidth="true" @onclick="@SendUnarySingleThroughput">
                        Throughput Unary Single
                    </MudButton> 
                </MudItem>
                <MudItem xs="6" md="2">
                    <MudButton Variant="Variant.Filled" FullWidth="true" @onclick="@SendUnaryBatchThroughput">
                        Throughput Unary Batch
                    </MudButton>
                </MudItem>
                <MudItem xs="6" md="2">
                    <MudButton Variant="Variant.Filled" FullWidth="true" @onclick="@SendStreamingSingleThroughput">
                        Throughput Streaming Single
                    </MudButton>
                </MudItem>
                <MudItem xs="6" md="2">
                    <MudButton Variant="Variant.Filled" FullWidth="true" @onclick="@SendStreamingBatchThroughput">
                        Throughput Streaming Batch
                    </MudButton>
                </MudItem>
                <MudItem xs="12" md="2">
                    <MudTextField Label="Requests per Test"
                                  T="int"
                                  @bind-Value="@RequestIterations"
                                  FullWidth="true"
                                  Type="Number" />
                </MudItem>
            </MudGrid>
        </MudItem>

        <!-- 2) Main Content Section -->
        <MudItem xs="6">
            <MudGrid>
                <MudItem xs="12" md="7">
                    <MudGrid Gutter="Gutter.None">
                        <MudItem xs="12" sm="6">
                            <MudCard Class="metric-card">
                                <MudCardContent>
                                    <MudText Typo="Typo.h6" Align="Align.Center">
                                        Unary Single Throughput
                                    </MudText>
                                    <MudText Typo="Typo.h4" Align="Align.Center">
                                        @UnarySingleMaxThroughput req/s
                                    </MudText>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudCard Class="metric-card">
                                <MudCardContent>
                                    <MudText Typo="Typo.h6" Align="Align.Center">
                                        Unary Single Requests Sent
                                    </MudText>
                                    <MudText Typo="Typo.h4" Align="Align.Center">
                                        @UnarySingleRequestsSent
                                    </MudText>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>

                        <!-- Unary Batch -->
                        <MudItem xs="12" sm="6">
                            <MudCard Class="metric-card">
                                <MudCardContent>
                                    <MudText Typo="Typo.h6" Align="Align.Center">
                                        Unary Batch Throughput
                                    </MudText>
                                    <MudText Typo="Typo.h4" Align="Align.Center">
                                        @UnaryBatchMaxThroughput req/s
                                    </MudText>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudCard Class="metric-card">
                                <MudCardContent>
                                    <MudText Typo="Typo.h6" Align="Align.Center">
                                        Unary Batch Requests Sent
                                    </MudText>
                                    <MudText Typo="Typo.h4" Align="Align.Center">
                                        @UnaryBatchRequestsSent
                                    </MudText>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>

                        <!-- Streaming Single -->
                        <MudItem xs="12" sm="6">
                            <MudCard Class="metric-card">
                                <MudCardContent>
                                    <MudText Typo="Typo.h6" Align="Align.Center">
                                        Streaming Single Throughput
                                    </MudText>
                                    <MudText Typo="Typo.h4" Align="Align.Center">
                                        @StreamingSingleMaxThroughput req/s
                                    </MudText>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudCard Class="metric-card">
                                <MudCardContent>
                                    <MudText Typo="Typo.h6" Align="Align.Center">
                                        Streaming Single Requests Sent
                                    </MudText>
                                    <MudText Typo="Typo.h4" Align="Align.Center">
                                        @StreamingSingleRequestsSent
                                    </MudText>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>

                        <!-- Streaming Batch -->
                        <MudItem xs="12" sm="6">
                            <MudCard Class="metric-card">
                                <MudCardContent>
                                    <MudText Typo="Typo.h6" Align="Align.Center">
                                        Streaming Batch Throughput
                                    </MudText>
                                    <MudText Typo="Typo.h4" Align="Align.Center">
                                        @StreamingBatchMaxThroughput req/s
                                    </MudText>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudCard Class="metric-card">
                                <MudCardContent>
                                    <MudText Typo="Typo.h6" Align="Align.Center">
                                        Streaming Batch Requests Sent
                                    </MudText>
                                    <MudText Typo="Typo.h4" Align="Align.Center">
                                        @StreamingBatchRequestsSent
                                    </MudText>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                    </MudGrid>
                </MudItem>
            </MudGrid>
        </MudItem>
    </MudGrid>
</MudContainer>

<MudItem xs="12" md="5" Style="height: 750px; width: 100%;">
    <MudPaper Class="right-side-paper" Style="width: 100%">
        <MudChart ChartType="ChartType.Line" Style="height: 100%; width: 100%;"></MudChart>
    </MudPaper>
</MudItem>

<style> 

    .metric-card {
        margin-bottom: 10px;
        padding: 15px;
        background-color: rgba(0, 0, 0, 0.6);
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.8);
        color: #ffffff;
    }

    .mud-item
    { 
        margin-bottom: 10px;
        padding: 15px;
        background-color: rgba(0, 0, 0, 0.6);
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.8);
        color: #ffffff;
    }

    .MyMudPaper {
        min-height: 100vh;
        background: rgba(0, 0, 0, 0.6);
        border-radius: 12px;
        padding: 20px;
        border: 1px solid rgba(255, 255, 255, 0.1);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.8);
    }

</style>

@implements IDisposable

@code {

    private int UnarySingleMaxThroughput = 0;
    private int UnaryBatchMaxThroughput = 0;
    private int StreamingSingleMaxThroughput = 0;
    private int StreamingBatchMaxThroughput = 0;

    private int UnarySingleRequestsSent = 0;
    private int UnaryBatchRequestsSent = 0;
    private int StreamingSingleRequestsSent = 0;
    private int StreamingBatchRequestsSent = 0;

    private int RequestIterations = 50;

    private string FileSize = "small";

    protected async override Task OnInitializedAsync()
    {
        SentRequestStorage.OnSingleUnaryRequestsSent += HandleSingleUnaryRequestSent;

        UnarySingleRequestsSent = SentRequestStorage.SingleUnaryRequestsSent;

        SentRequestStorage.OnBatchUnaryRequestsSent += HandleBatchUnaryRequestSent; 

        UnaryBatchRequestsSent = SentRequestStorage.BatchUnaryRequestsSent;

        SentRequestStorage.OnSingleStreamingRequestSent += HandleSingleStreamingRequestSent; 

        StreamingSingleRequestsSent = SentRequestStorage.SingleStreamingRequestsSent; 

        SentRequestStorage.OnBatchStreamingRequestsSent += HandleBatchStreamingRequestSent; 

        StreamingBatchRequestsSent = SentRequestStorage.BatchStreamingRequestsSent;

        ThroughputService.OnStreamingSingleThroughput += HandleStreamingSingleThroughput;

        GetStreamingSingleThroughputRequest newStreamingSingle = new GetStreamingSingleThroughputRequest
        {};

        ThroughputService.StartReceivingStreamingSingleThroughput(newStreamingSingle);

        ThroughputService.OnStreamingBatchThroughput += HandleStreamingBatchThroughput; 

        GetStreamingBatchThroughputRequest newStreamingBatch = new GetStreamingBatchThroughputRequest
        { };

        ThroughputService.StartReceivingStreamingBatchThroughput(newStreamingBatch); 

        ThroughputService.OnUnarySingleThroughput += HandleUnarySingleThroughput; 

        GetUnarySingleThroughputRequest newUnarySingle = new GetUnarySingleThroughputRequest
        {};

        ThroughputService.StartReceivingUnarySingleThroughput(newUnarySingle);

        ThroughputService.OnUnaryBatchThroughput += HandleUnaryBatchThroughput; 

        GetUnaryBatchThroughputRequest newUnaryBatch = new GetUnaryBatchThroughputRequest
        {};

        ThroughputService.StartReceivingUnaryBatchThroughput(newUnaryBatch);


        await base.OnInitializedAsync();
    }

    public async void HandleUnaryBatchThroughput(GetUnaryBatchThroughputResponse getUnaryBatchThroughput)
    {
        UnaryBatchMaxThroughput = getUnaryBatchThroughput.CurrentThroughput;

        await InvokeAsync(StateHasChanged);
    }

    public async void HandleUnarySingleThroughput(GetUnarySingleThroughputResponse getUnarySingleThroughput)
    {
        UnarySingleMaxThroughput = getUnarySingleThroughput.CurrentThroughput; 

        await InvokeAsync(StateHasChanged);
    }

    public async void HandleStreamingBatchThroughput(GetStreamingBatchThroughputResponse getStreamingBatchThroughput)
    {
        StreamingBatchMaxThroughput = getStreamingBatchThroughput.CurrentThroughput; 

        await InvokeAsync(StateHasChanged);
    }

    public async void HandleStreamingSingleThroughput(GetStreamingSingleThroughputResponse getStreamingSingleThroughput)
    {
        StreamingSingleMaxThroughput = getStreamingSingleThroughput.CurrentThroughput;

        await InvokeAsync(StateHasChanged);
    }

    public async Task SendUnarySingleThroughput()
    {

        await UnaryRequestService.UnaryResponseIterativeAsync(null, FileSize, RequestIterations);
    }

    public async Task SendUnaryBatchThroughput()
    {
        await UnaryRequestService.UnaryBatchIterativeAsync(null, RequestIterations, FileSize);
    }

    public async Task SendStreamingSingleThroughput()
    {

        Log.Information($"Started streaming single throughputs");

        await StreamingLatencyService.CreateManySingleStreamingRequests(null, null, RequestIterations, FileSize);

    }

    public async Task SendStreamingBatchThroughput()
    {
        await StreamingLatencyService.CreateManyStreamingBatchRequest(null, RequestIterations, FileSize);
    }

    public async void HandleSingleUnaryRequestSent(int newSingleUnaryCount)
    {
        UnarySingleRequestsSent = newSingleUnaryCount;

        await InvokeAsync(StateHasChanged);
    }

    public async void HandleBatchUnaryRequestSent(int newBatchUnaryCount)
    {

        UnaryBatchRequestsSent = newBatchUnaryCount;

        await InvokeAsync(StateHasChanged);
    }

    public async void HandleSingleStreamingRequestSent(int newSingleStreamingCount)
    {
        StreamingSingleRequestsSent = newSingleStreamingCount; 

        await InvokeAsync(StateHasChanged);
    }

    public async void HandleBatchStreamingRequestSent(int newBatchStreamingCount)
    {
        StreamingBatchRequestsSent = newBatchStreamingCount; 

        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        ThroughputService.Dispose();
    }

}

