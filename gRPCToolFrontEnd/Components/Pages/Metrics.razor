@page "/Metrics"
@using Grpc.Net.Client
@using Serilog
@using gRPCToolFrontEnd.Components.Layout
@using gRPCToolFrontEnd.Helpers
@using gRPCToolFrontEnd.LocalStorage
@using gRPCToolFrontEnd.Services
@using Microsoft.EntityFrameworkCore
@layout MainLayout 
@inject AccountDetailsStore AccountDetailsStore
@inject RequestDelayStorage RequestDelayStorage
@inject UtilitiesService UtilitiesService
@inject ClientHelper ClientHelper
@inject ClientStorage ClientStorage
@inject PayloadUsageStore PayloadUsageStore

<PageTitle>Metrics</PageTitle>

<MudGrid Class="metrics-page" AlignItems="Center" >
    <!-- Left Panel -->
    <MudItem xs="12" sm="4">
        <MudContainer Class="metrics-container">

            <MudText Typo="Typo.h6" Class="metrics-header">Session Metrics</MudText>
           
            <MudPaper Class="metric-card" Elevation="2">
                <MudText Typo="Typo.body1">Total Channels</MudText>
                <MudText Typo="Typo.h5">@TotalChannels</MudText>
            </MudPaper>

            <MudPaper Class="metric-card" Elevation="2">
                <MudText Typo="Typo.body1">Total Unary Clients</MudText>
                <MudText Typo="Typo.h5">@ActiveUnaryClients</MudText>
            </MudPaper>

            <MudPaper Class="metric-card" Elevation="2">
                <MudText Typo="Typo.body1">Total Streaming Clients</MudText>
                <MudText Typo="Typo.h5">@ActiveStreamingClients</MudText>
            </MudPaper>

            <MudPaper Class="metric-card" Elevation="2">
                <MudText Typo="Typo.body1">Ephemeral Ports</MudText>
                <MudText Typo="Typo.h5">@EphemeralPorts</MudText>
            </MudPaper>

            <MudPaper Class="metric-card" Elevation="2">
                <MudText Typo="Typo.body1">Total Small Payloads</MudText>
                <MudText Typo="Typo.h5">@SmallPayloadTotal</MudText>
            </MudPaper>

            <MudPaper Class="metric-card" Elevation="2">
                <MudText Typo="Typo.body1">Total Medium Payloads</MudText>
                <MudText Typo="Typo.h5">@MediumPayloadTotal</MudText>
            </MudPaper>

            <MudPaper Class="metric-card" Elevation="2">
                <MudText Typo="Typo.body1">Total Large Payloads</MudText>
                <MudText Typo="Typo.h5">@LargePayloadTotal</MudText>
            </MudPaper>

            <MudPaper Class="metric-card" Elevation="2">
                <MudText Typo="Typo.body1">Put something here</MudText>
                <MudText Typo="Typo.h5">@LargePayloadTotal</MudText>
            </MudPaper>
            

        </MudContainer>
    </MudItem>

    <!-- Right Panel -->
    <MudItem xs="12" sm="8" Class="chart-item">

        <MudPaper Class="chart-container" Elevation="2">

            <MudText Typo="Typo.h6" Align="Align.Center">Request Comparison</MudText>

            <MudChart ChartType="ChartType.Bar" ChartSeries="RequestComparsionSeries" />

        </MudPaper>
    </MudItem>
</MudGrid>

<style>

   


    .metrics-page {
        height: 100vh;
        display: flex;
        align-items: stretch;
        justify-content: center

    }

    .metrics-container {
        margin-top: 10px;
        padding: 15px;
    }

    .metrics-header {
        margin-bottom: 10px;
        font-weight: bold;
    }

    .metric-card {
        margin-bottom: 10px;
        padding: 15px;
        background-color: rgba(0, 0, 0, 0.6);
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.8);
        color: #ffffff;
    }

    .chart-item {
        display: flex;
        align-items: center; 
        justify-content: center; 
    }

    .chart-container {
        width: 90%; 
        height: 60%; 
        padding: 20px;
        background-color: rgba(0, 0, 0, 0.6);
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.8);
    }
</style>

@code {

    private int TotalChannels = 0; 

    private int ActiveUnaryClients = 0; 

    private int ActiveStreamingClients = 0; 

    private int EphemeralPorts = 0;

    private int SmallPayloadTotal = 0; 

    private int MediumPayloadTotal = 0; 

    private int LargePayloadTotal = 0;

    private int MaxSize = 10_000;

    private List<double> StreamingBatchDelays = new List<double>();

    private List<double> StreamingSingleDelays = new List<double>();

    private List<double> SingleUnaryDelays = new List<double>();

    private List<double> SingleBatchDelays = new List<double>();

    private List<ChartSeries> RequestComparsionSeries = new List<ChartSeries>
    {
        new ChartSeries()
        {
            Name = "StreamingSingle", 
        },
        new ChartSeries()
        {
            Name="StreamingBatch"
        },
        new ChartSeries()
        {
            Name="UnarySingle"
        },
        new ChartSeries()
        {
            Name="UnaryBatch"
        }
    };

    protected override async Task OnInitializedAsync()
    {

        Dictionary<Guid, GrpcChannel> getChannels = AccountDetailsStore.GetChannels();

        TotalChannels = getChannels.Count;

        Log.Information($"Current amount of channels within the session: {TotalChannels}");

        EphemeralPorts = getChannels.Count;

        Log.Information($"Current amount of ephemeral ports within the session: {EphemeralPorts} ");

        ClientStorage.OnUnaryClientsUpdated += HandlingUnaryClients;

        ActiveUnaryClients = ClientStorage.GetTotalUnaryClients();

        Log.Information($"Current amount of unary clients: {ActiveUnaryClients}");

        ClientStorage.OnStreamingClientUpdated += HandlingStreamingClients;

        ActiveStreamingClients = ClientStorage.GetTotalStreamingClients();

        Log.Information($"Current amount of streaming clients: {ActiveStreamingClients}");

        PayloadUsageStore.OnSmallPayloadReceived += HandlingSmallPayload;
        SmallPayloadTotal = PayloadUsageStore.SmallPayloadTotal;

        PayloadUsageStore.OnMediumPayloadReceived += HandlingMediumPayload;
        MediumPayloadTotal = PayloadUsageStore.MediumPayloadTotal;

        PayloadUsageStore.OnLargePayloadReceived += HandlingLargePayload;
        LargePayloadTotal = PayloadUsageStore.LargePayloadTotal;

        string? sessionUnique = await ClientHelper.GetStringFromStringFromLocalStorage("session-unique");

        UtilitiesService.OnBatchReceived += SettingStreamingBatchDelays;

        GetStreamingBatchDelaysRequest streamingBatchDelays = new GetStreamingBatchDelaysRequest
        { };

        UtilitiesService.StartReceivingStreamingBatchMessages(streamingBatchDelays, sessionUnique);

        UtilitiesService.OnStreamingSingleReceived += SettingStreamingSingleDelays;

        GetStreamingDelaysRequest streamingSingleDelays = new GetStreamingDelaysRequest
        { };

        UtilitiesService.StartReceivingStreamingMessages(streamingSingleDelays, sessionUnique);

        UtilitiesService.OnUnarySingleReceived += SettingUnarySingleDelays;

        GetUnaryDelaysRequest unarySingleDelays = new GetUnaryDelaysRequest
        { };

        UtilitiesService.StartReceivingUnaryMessages(unarySingleDelays, sessionUnique);

        UtilitiesService.OnUnaryBatchReceived += SettingUnaryBatchDelays;

        GetUnaryBatchDelaysRequest unaryBatchDelays = new GetUnaryBatchDelaysRequest
        { };

        UtilitiesService.StartReceivingUnaryBatchMessages(unaryBatchDelays, sessionUnique);


        StateHasChanged();

    }

    private async void HandlingSmallPayload(int newSmallPayloadTotal)
    {
        SmallPayloadTotal = newSmallPayloadTotal; 
        await InvokeAsync(StateHasChanged);
    }

    private async void HandlingMediumPayload(int newMediumPayloadTotal)
    {
        MediumPayloadTotal = newMediumPayloadTotal;
        await InvokeAsync(StateHasChanged);
    }

    private async void HandlingLargePayload(int newLargePayloadTotal)
    {
        LargePayloadTotal = newLargePayloadTotal; 
        await InvokeAsync(StateHasChanged);
    }

    private async void HandlingUnaryClients(int newUnaryClientCount)
    {
        ActiveUnaryClients = newUnaryClientCount;
        await InvokeAsync(StateHasChanged);
    }

    private async void HandlingStreamingClients(int newStreamingClientCount)
    {
        ActiveStreamingClients = newStreamingClientCount;
        await InvokeAsync(StateHasChanged);
    }

    private async void SettingStreamingSingleDelays(GetStreamingDelaysResponse streamingSingleResponse)
    {
        ChartSeries gettingSeries = await GetSeries("StreamingSingle");

        await InvokeAsync(() =>
        {
            if (TimeSpan.TryParse(streamingSingleResponse.GatheringStreamingDelays.Delay, out TimeSpan delay))
            {
                double delayMs = delay.TotalMilliseconds;

                StreamingSingleDelays.Add(delayMs);

                gettingSeries.Data = new double[] { StreamingSingleDelays.Count };
            }

            StateHasChanged();

        });
    }

    private async void SettingStreamingBatchDelays(GetStreamingBatchDelaysResponse streamingBatchDelaysResponse)
    {
        ChartSeries gettingSeries = await GetSeries("StreamingBatch");

        Log.Information($"Setting streaming batch delays received");

        await InvokeAsync(() =>
        {

            if(TimeSpan.TryParse(streamingBatchDelaysResponse.GatheringStreamingBatchDelays.Delay, out TimeSpan delay))
            {
                double delayInMs = delay.TotalMilliseconds;

                StreamingBatchDelays.Add(Convert.ToDouble(delayInMs));

                gettingSeries.Data = new double[] {StreamingBatchDelays.Count}; 
            }

            StateHasChanged();

        });
    }

    private async void SettingUnarySingleDelays(GetUnaryDelaysResponse singleUnaryDelaysResponse)
    {
        ChartSeries gettingSeries = await GetSeries("UnarySingle");

        await InvokeAsync(() =>
        {
            if (TimeSpan.TryParse(singleUnaryDelaysResponse.GatheringUnaryDelays.Delay, out TimeSpan delay))
            {
                double delayInMs = delay.TotalMilliseconds; 

                SingleUnaryDelays.Add(delayInMs);

                gettingSeries.Data = new double[] {SingleUnaryDelays.Count};
            }

            StateHasChanged();

        });
    }

    private async void SettingUnaryBatchDelays(GetUnaryBatchDelaysResponse unaryDelaysResponse)
    {
        ChartSeries getSeries = await GetSeries("UnaryBatch");

        await InvokeAsync(() =>
        {

            if(TimeSpan.TryParse(unaryDelaysResponse.GatheringUnaryBatchDelays.Delay, out TimeSpan delay))
            {
                double delayInMs = delay.TotalMilliseconds;

                SingleBatchDelays.Add(delayInMs);

                getSeries.Data = new double[] { SingleBatchDelays.Count };

            }

            StateHasChanged();

        });
    }

    private async Task<ChartSeries> GetSeries(string seriesName)
    {
        ChartSeries? series =  RequestComparsionSeries.FirstOrDefault(csn => csn.Name == seriesName);

        if(series == null)
        {
            Log.Information($"could not retrieve series with name {seriesName}");
        }

        Log.Information($"found series with name {seriesName}");

        return series;
    }

}
