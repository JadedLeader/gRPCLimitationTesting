// <auto-generated />
using System;
using DbManagerWorkerService.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DbManagerWorkerService.Migrations
{
    [DbContext(typeof(DataContexts))]
    [Migration("20241218121007_CompleteDbRework")]
    partial class CompleteDbRework
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DbManagerWorkerService.DbModels.Account", b =>
                {
                    b.Property<Guid>("AccountUnique")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthTokenAuthUnique")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthUnique")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SessionUnique")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TimeOfAccountCreation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeOfLogin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountUnique");

                    b.HasIndex("AuthTokenAuthUnique");

                    b.HasIndex("SessionUnique");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("DbManagerWorkerService.DbModels.AuthToken", b =>
                {
                    b.Property<Guid>("AuthUnique")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CurrentToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthUnique");

                    b.ToTable("AuthToken");
                });

            modelBuilder.Entity("DbManagerWorkerService.DbModels.ClientInstance", b =>
                {
                    b.Property<Guid>("ClientUnique")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SessionUnique")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ClientUnique");

                    b.ToTable("ClientInstance");
                });

            modelBuilder.Entity("DbManagerWorkerService.DbModels.DelayCalc", b =>
                {
                    b.Property<Guid>("messageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClientInstanceClientUnique")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientUnique")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CommunicationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DataIterations")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Delay")
                        .HasColumnType("time");

                    b.Property<string>("RequestType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("messageId");

                    b.HasIndex("ClientInstanceClientUnique");

                    b.ToTable("DelayCalc");
                });

            modelBuilder.Entity("DbManagerWorkerService.DbModels.Session", b =>
                {
                    b.Property<Guid>("SessionUnique")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountUnique")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientInstanceClientUnique")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SessionCreated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SessionUnique");

                    b.HasIndex("ClientInstanceClientUnique");

                    b.ToTable("Session");
                });

            modelBuilder.Entity("DbManagerWorkerService.DbModels.Account", b =>
                {
                    b.HasOne("DbManagerWorkerService.DbModels.AuthToken", "AuthToken")
                        .WithMany()
                        .HasForeignKey("AuthTokenAuthUnique")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbManagerWorkerService.DbModels.Session", "Session")
                        .WithMany()
                        .HasForeignKey("SessionUnique")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuthToken");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("DbManagerWorkerService.DbModels.DelayCalc", b =>
                {
                    b.HasOne("DbManagerWorkerService.DbModels.ClientInstance", null)
                        .WithMany("DelayCalcs")
                        .HasForeignKey("ClientInstanceClientUnique");
                });

            modelBuilder.Entity("DbManagerWorkerService.DbModels.Session", b =>
                {
                    b.HasOne("DbManagerWorkerService.DbModels.ClientInstance", "ClientInstance")
                        .WithMany()
                        .HasForeignKey("ClientInstanceClientUnique")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientInstance");
                });

            modelBuilder.Entity("DbManagerWorkerService.DbModels.ClientInstance", b =>
                {
                    b.Navigation("DelayCalcs");
                });
#pragma warning restore 612, 618
        }
    }
}
